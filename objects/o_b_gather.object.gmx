<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_b_collied</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SETUP
event_inherited();
previous_sprite = spr_p_e;
sprite_gather_north = spr_p_g_n;
sprite_gather_south = spr_p_g_s;
sprite_gather_east = spr_p_g_e;
sprite_return_east = spr_p_r_e;
gather_time = room_speed * 2;
gather_image_speed = 0.3;
gather_amount = 10;
gather_search_distance = 100;
gather_amount_max = 20;
index = noone;
next_target = noone;
gold = 0;
wood = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GATHERED RESOURCE
if (target != noone) {
   if (instance_exists(target)) { 
       if (object_is_ancestor(target.object_index, o_b_resource)) {
          show_debug_message("[" + string(id) + "] Mined : " + string(target.type) + " from [" + string(target.id) + "] Amount Left: " + string(target.amount));
             if (target.amount &gt; 0) {
                switch (target.type) {
                       case "wood":
                        target.amount -= gather_amount;
                        amount += gather_amount; 
                        wood += gather_amount;
                        break;
                        
                        case "gold":
                        target.amount -= gather_amount;
                        amount += gather_amount; 
                        gold += gather_amount;
                        break;
                }
             }
         }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATE: GATHER
event_inherited();

if (state == "gather" &amp;&amp; alarm[1] &lt;= -1) {
   if (target != noone &amp;&amp; instance_exists(target)) {
      if (target.amount &gt; 0) {
          alarm[1] = gather_time;
          index = target.object_index;
      } else next_state = "gather_next";
            
      if (instance_exists(return_to)) with (return_to) { instance_destroy(); };
       return_to = instance_create(target.x, target.y, o_waypoint);
       
       if (amount &lt; gather_amount_max) {
            if (! instance_exists(target)) {
               target = noone;
               next_state = "gather_next";
            }
        } else {
          next_state = "gather_return";
        }
   }
   else next_state = "gather_next";
}
if (state == "gather") {
   image_xscale = 1; 
   if (direction &gt;= 305 || direction &lt;= 45) sprite_index = sprite_gather_east;
    else if (direction &gt;= 46 &amp;&amp; direction &lt;= 135) sprite_index = sprite_gather_north;
    else if (direction &gt;= 136 &amp;&amp; direction &lt;= 225) {
        sprite_index = sprite_gather_east;
        image_xscale = -1;    
    }
    else if (direction &gt;= 226 &amp;&amp; direction &lt;= 304) sprite_index = sprite_gather_south;
    
   image_speed = gather_image_speed;
   
   if (next_state != "gather") {
       alarm[1] = -1;
       image_speed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATE: GATHER_NEXT
if (state == "gather_next") {
   if (object_is_ancestor(index, o_b_resource)) {
      next_target = instance_nearest(x,y, index);
      if (distance_to_object(next_target) &gt; gather_search_distance) next_target = noone;
    } else next_target = noone;
    
   if (next_target != noone &amp;&amp; instance_exists(next_target)) {
       next_state = "move";
       target = next_target;
    }
    else if (return_to != noone) next_state = "gather_return";
    else next_state = "default";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATE: GATHER_RETURN
if (state == "gather_return") {
   if (target != noone &amp;&amp; instance_exists(target)) return_to = instance_create(target.x, target.y, o_waypoint);
   target = instance_nearest(x,y,o_b_dropoff);
   
   if (target != noone) {
       show_debug_message("[" + string(id) + "] Returning to [" + string(target.id) + "]");
       next_state = "move";
       
   } else next_state = "default";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GATHER OVERRIDES
if (amount &gt; 0 &amp;&amp; state == "moving") {
    image_xscale = 1; 
    if (direction &gt;= 305 || direction &lt;= 45) sprite_index = sprite_return_east;
    else if (direction &gt;= 46 &amp;&amp; direction &lt;= 135) sprite_index = sprite_return_east;
    else if (direction &gt;= 136 &amp;&amp; direction &lt;= 225) {
         sprite_index = sprite_return_east;
         image_xscale = -1;    
    }
    else if (direction &gt;= 226 &amp;&amp; direction &lt;= 304) sprite_index = sprite_return_east;
     
    image_speed = gather_image_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//draw_set_colour(c_green);
//draw_circle(x,y,gather_search_distance,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
