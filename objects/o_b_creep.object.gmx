<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SETUP
image_speed = 0;
creep_health = 1;
max_health = 1;
base_defense = 0;
defense = base_defense;
attack = 1;
name = "default";
types = ds_list_create();

// Selection
can_select = true;
is_selected = false;
is_leader = false;
squad_id = 0;
menu = noone;

// Movement
waypoint = noone;
target = noone;
end_x = 0;
end_y = 0;
moving_x = 0;
moving_y = 0;
stuck_count = 0;
next_target = noone;
stuck_max = 5;
grid = noone;
nearest = noone;
path = noone;
select = false;
run_once = noone;
return_to = noone;
move_speed = 3;

// Gathering
amount = 0;

// Sprite Control
sprite_east = spr_p_e;
sprite_north = spr_p_n;
sprite_south = spr_p_s;
sprite_portrait = spr_p_portrait;

// Misc
player = global.players[0];
state = "default";
next_state = "default";
last_state = "default";
state_count = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RUN ONCE

// SELECT SQUAD
if (run_once = "select") {
   is_selected = true;
   found = -1;
    for (var i = 0; i &lt; ds_list_size(global.squads); i++) {
        squad = global.squads[| i];
        
        for (var o = 0; o &lt; ds_list_size(squad); o++) {
            if (squad_id == squad[| o].squad_id) squad[| o].is_selected = true;
        }
    }
    select = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FINAL STEP - RUN ALWAYS
if (next_state == state) state_count++
else {
     state_count = 0;
     last_state = state;
     show_debug_message("[" + string(id) + "] State change to: " + string(next_state));
     state = next_state;
     image_speed = 0;
}
run_once = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEFENSE MODIFIERS
var inst = instance_position(x, y, o_cover);
if (inst != noone) {
   defense = base_defense + inst.defense;
} else {
  defense = base_defense;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ALWAYS RUN
depth = y * -1;

xx = window_view_mouse_get_x(1);
yy = window_view_mouse_get_y(1);

if (xx &gt;= 0 &amp;&amp; xx &lt;= view_wview[0] &amp;&amp; yy &gt;= 0 &amp;&amp; yy &lt;= view_hview[0]) {
   // Not sure what I'm doing with this yet...
   // why not have game state in the fucking mouse object.
   if (o_mouse.state != "build") {
        // Select if within selection box.
        if (mouse_check_button_released(mb_left) &amp;&amp; can_select) {
           if (point_in_rectangle(x, y, global.start_x, global.start_y, global.end_x, global.end_y)) {
              run_once = "select";
           }
           else is_selected = false;
        }
        // Move to via Path.
        if (is_selected &amp;&amp; mouse_check_button_pressed(mb_right)) {
           next_state = "force_move"; 
           next_target = instance_create(mouse_x, mouse_y, o_waypoint);
        }
    }
    if (o_mouse.state == "build") {
       // Go build that shit.
       if (is_selected) {
          next_state = "force_move"; 
          next_target = instance_create(mouse_x, mouse_y, o_waypoint);    
       }
    }
}

// Create Menu.
if (is_leader &amp;&amp; is_selected &amp;&amp; menu == noone) {
   menu = instance_create(x,y,o_menu);
   menu.selected = id;
   menu.build_menu = true;
}
if (! is_selected &amp;&amp; menu != noone) {
   with (menu) { instance_destroy(); }
   menu = noone;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATE: DEFAULT
if (state == "default") {
   image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATE: MOVE
if (state == "move") {
   image_speed = 0;
   
   if (path != noone) {
      path_delete(path);
      path = noone;
   }
   if (waypoint != noone) {
      with (waypoint) { instance_destroy(); }
      waypoint = noone;
   }
   if (grid != noone) {
      mp_grid_destroy(grid);
   }
 
    if (target != noone &amp;&amp; instance_exists(target)) {
       end_x = target.x;
       end_y = target.y;
        
       grid = s_create_grid();
       path = path_add();
       
       waypoint = instance_create(end_x,end_y,o_waypoint);
       var herepoint = instance_create(x, y, o_waypoint);
       waypoint = s_find_nearest_spot(waypoint, herepoint, grid);
   }
   if (waypoint == noone) next_state = "default";
       
    if (waypoint != noone &amp;&amp; path != noone) {
       // clean up waypoints
       if (target.object_index == o_waypoint) with (target) { instance_destroy(); };
       
       if (last_state == "force_move") {
            target = instance_position(end_x, end_y, o_b_creep);
            if (target == noone) target = instance_position(end_x, end_y, o_b_building);
       }
        mp_grid_path(grid, path, x, y, waypoint.x, waypoint.y, true);
        path_start(path, move_speed, path_action_stop, false);
        next_state = "moving";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATE: MOVING
if (state == "moving") {
   image_speed = 0.3;
   
    if (amount &lt;= 0) {
        image_xscale = 1;
         if (direction &gt;= 305 || direction &lt;= 45) sprite_index = sprite_east;
         else if (direction &gt;= 46 &amp;&amp; direction &lt;= 135) sprite_index = sprite_north;
         else if (direction &gt;= 136 &amp;&amp; direction &lt;= 225) {
              sprite_index = sprite_east;
              image_xscale = -1;    
         }
         else if (direction &gt;= 226 &amp;&amp; direction &lt;= 304) sprite_index = sprite_south;
     }
   if (path_position == 1 &amp;&amp; waypoint != noone) {
       image_speed = 0;
       image_index = 0;
       
       path_delete(path);
       path = noone;

      // Handle gather logic.
      if (ds_list_find_index(types,"gather") != -1) {
         if (target != noone &amp;&amp; instance_exists(target)) {
            if (object_is_ancestor(target.object_index, o_b_resource)) next_state = "gather";
            else if (object_is_ancestor(target.object_index, o_b_dropoff) &amp;&amp; amount &gt; 0) next_state = "drop_off";
            else if (return_to != noone) next_state = "gather_next";
         } else if (return_to != noone) next_state = "gather_next";
      }
        
      // Handle build and repair logic.
      if (ds_list_find_index(types,"build") != -1 &amp;&amp; next_state == "moving") {
          if (target != noone &amp;&amp; instance_exists(target)) {
             if (object_is_ancestor(target.object_index, o_b_building) &amp;&amp;
                (target.build_health &lt; target.max_health)) {
                next_state = "build";
             }    
         }
      }
            
      with (waypoint) { instance_destroy(); }
      waypoint = noone;
      
      if (next_state == "moving") next_state = "default";
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATE: FORCE_MOVE
if (state == "force_move") {
   target = next_target;
   waypoint = noone;
   return_to = noone;
   index = target.object_index;
   next_state = "move";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STATE: LOOK
if (state == "look") { 
   if (target != noone &amp;&amp; instance_exists(target)) {
      direction = point_direction(x, y, target.x, target.y);
   }
    if (direction &gt;= 305 || direction &lt;= 45) sprite_index = sprite_east;
    else if (direction &gt;= 46 &amp;&amp; direction &lt;= 135) sprite_index = sprite_north;
    else if (direction &gt;= 136 &amp;&amp; direction &lt;= 225) {
        sprite_index = sprite_east;
        image_xscale = -1;    
    }
    else if (direction &gt;= 226 &amp;&amp; direction &lt;= 304) sprite_index = sprite_south;  
    
    image_speed = 0;
    next_state = "default";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DRAW MENU ITEMS
if (is_selected &amp;&amp; is_leader) {
   draw_sprite(sprite_portrait,-1,42,675);  
   draw_sprite(sprite_index,image_index,378,700);  

   draw_set_colour(c_black);
   draw_text(166, 670, name);
   draw_text(166, 685, "Health: " + string(creep_health) + "/" + string(max_health));
   draw_text(166, 700, "Attack: " + string(attack));
   draw_text(166, 715, "Defence: " + string(defense));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (is_selected) {
   draw_set_colour(c_red);
   draw_ellipse(x+sprite_width/2, y+sprite_height/2-5, x-sprite_width/2, y+sprite_height/2+5, true); 
}
// Draw the sprite
draw_self();
if (defense &gt; 0) {
   draw_set_colour(c_green);
   draw_rectangle(x+5, y-sprite_height/2-5, x-5, y-sprite_height/2-10, false);
}
//if (is_leader) {
//   image_blend = c_red;
//}
draw_set_colour(c_red);
draw_text(x - sprite_width, y - sprite_height, string(id) + " : " + string(state));

// DEBUG
if (path_position != 1 &amp;&amp; path != noone) draw_path(path, x, y, true);

/*if (target != noone) {
   with (target) {
        is_selected = true;
   }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
