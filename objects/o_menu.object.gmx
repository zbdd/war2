<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SETUP
selected = noone;
show_default = true;
show_build_menu = false;
buttons = ds_list_create();
build_menu = false;
is_sub_menu_loaded = false;
type = "default";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; ds_list_size(buttons); i++) {
   with (buttons[| i]) { instance_destroy(); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BUILD MENU
menu_x = 520;
menu_y = 661;
menu_x_max = 791;
   
switch (type) {
   case "build":
   // TOP
   // if (selected != noone) {
       //if (ds_list_find_index(selected.types, "build") != -1) {
          button = instance_create(menu_x, menu_y, o_button);
          button.on_click = "show_build_menu";
          ds_list_add(buttons, button);
      // }
       //if (ds_list_find_index(selected.types, "chop") != -1) {
          button = instance_create(menu_x + 48, menu_y, o_button);
          button.sprite_index = spr_button_chop;
          button.on_click = "order_chop";
          ds_list_add(buttons, button);
       //}
    
  //  }
    break;
    
    case "wood":
        button = instance_create(menu_x, menu_y, o_button);
        button.sprite_index = spr_button_chop;
        button.on_click = "order_chop_this";
        ds_list_add(buttons, button);
    break; 
    // BOTTOM
}
if (mouse_check_button_pressed(mb_left)) {
   var inst = instance_position(mouse_x, mouse_y, o_button);
   if (inst != noone) {
   /// TODO REMOVE
      show_debug_message(inst.on_click);
      switch (inst.on_click) {
         case "show_build_menu":
            if (! is_sub_menu_loaded) {
               is_sub_menu_loaded = true;
               button = instance_create(menu_x, menu_y + 40, o_build_farm);
               ds_list_add(buttons, button);   
            } else {
               is_sub_menu_loaded = false;
               for(var i = 0; i &lt; ds_list_size(buttons); i++) {
                       with (buttons[| i]) { if (is_sub_button) instance_destroy(); }
               }
            }
         break;
         
         case "order_chop":
            if (o_mouse.state != "order_chop") {
               o_mouse.next_state = "order_chop";
            } else {
              o_mouse.next_state = "default";
            }
         break;
         
         case "order_chop_this":
            selected.available = true;
         break;
         
      }
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
